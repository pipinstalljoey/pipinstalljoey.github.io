<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>1|pip_install_joey&#39;s first Blog</title>
    <url>/2023/03/25/1-pip-install-joey-s-first-Blog/</url>
    <content><![CDATA[<p>Hi there！<br>我的Blog正式和大家见面了！<br>可以看看我的GitHub和哔哩哔哩主页。<br>期待我的下次见面吧！<br>ps.记得评论！</p>
]]></content>
      <tags>
        <tag>information</tag>
      </tags>
  </entry>
  <entry>
    <title>11|CSP-J复习笔记——（四）数学问题和排序算法</title>
    <url>/2023/08/24/11-CSP-J%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%EF%BC%88%E5%9B%9B%EF%BC%89%E6%95%B0%E5%AD%A6%E9%97%AE%E9%A2%98%E5%92%8C%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h2 id="Warning"><a href="#Warning" class="headerlink" title="Warning:"></a>Warning:</h2><p>本文原来图片很多，但是以前用的图床崩了，所以没图了…<br>(Continue…)</p>
<h1 id="一、质数求解"><a href="#一、质数求解" class="headerlink" title="一、质数求解"></a>一、质数求解</h1><h2 id="1-质数判断代码"><a href="#1-质数判断代码" class="headerlink" title="1.质数判断代码"></a>1.质数判断代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n % i == <span class="number">0</span>) &#123;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (flag)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Yes&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;No&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-分解质因数代码"><a href="#2-分解质因数代码" class="headerlink" title="2.分解质因数代码"></a>2.分解质因数代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n, i;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">2</span>; i * i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (n % i == <span class="number">0</span>) &#123;</span><br><span class="line">            cout &lt;&lt; i;</span><br><span class="line">            n = n / i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n != <span class="number">1</span>)</span><br><span class="line">        cout &lt;&lt; n;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="验证哥德巴赫猜想代码"><a href="#验证哥德巴赫猜想代码" class="headerlink" title="验证哥德巴赫猜想代码"></a>验证哥德巴赫猜想代码</h2><p>（输出方案个数）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> SIZE = <span class="number">1000</span>;</span><br><span class="line">    <span class="type">int</span> n, r, p[SIZE], i, j, k, ans;</span><br><span class="line">    <span class="type">bool</span> tmp;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    r = <span class="number">1</span>;</span><br><span class="line">    p[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        tmp = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= r; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % p[j] == <span class="number">0</span>) &#123;</span><br><span class="line">                tmp = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (tmp) &#123;</span><br><span class="line">            r++;</span><br><span class="line">            p[r] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">2</span>; i &lt;= n / <span class="number">2</span>; i++) &#123;</span><br><span class="line">        tmp = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= r; j++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (k = j; k &lt;= r; k++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i + <span class="number">1</span> == p[j] + p[k]) &#123;</span><br><span class="line">                    tmp = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (tmp) &#123;</span><br><span class="line">                ans++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="二、数学问题"><a href="#二、数学问题" class="headerlink" title="二、数学问题"></a>二、数学问题</h1><h2 id="1-加法原理"><a href="#1-加法原理" class="headerlink" title="1.加法原理"></a>1.加法原理</h2><p>做一件事，完成它有n种方法，第一类方法中有a种不同方法，第二类方法中有b种方法……完成这件事共有N &#x3D; a + b + … 种不同的方法。</p>
<h2 id="2-乘法原理"><a href="#2-乘法原理" class="headerlink" title="2.乘法原理"></a>2.乘法原理</h2><p>做一件事，完成它共需要n个步骤，做第一步有a中方法，做第二步有b种不同方法，……完成这件事共有N &#x3D; a * b * ……中不同的方法。</p>
<h2 id="3-排列组合公式"><a href="#3-排列组合公式" class="headerlink" title="3.排列组合公式"></a>3.排列组合公式</h2><h3 id="排列"><a href="#排列" class="headerlink" title="排列"></a>排列</h3><p><em><strong>A(x, y) &#x3D; x! &#x2F; (x - y)!</strong></em><br>x代表总共的数量，y代表每次排列的个数。<br>e.g.<br>用1，2，3三个数字组成两位数，能组成几个？<br>解：A(3, 2) &#x3D; 3! &#x2F; (3 - 2)! &#x3D; 3 * 2 &#x2F; 1 &#x3D; 6<br>即12, 13, 21, 23, 31, 32</p>
<h3 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h3><p><em><strong>C(x, y) &#x3D; x! &#x2F; [y! * (x - y)!]</strong></em><br>x代表总共的数量，y代表每次组合的个数。<br>e.g.<br>从1，2，3三个数字挑出两个，有几种方法？<br>解：C(3, 2) &#x3D; 3! &#x2F; [2! &#x2F; (3 - 2)!] &#x3D; 3 * 2 &#x2F; (2 &#x2F; 1) &#x3D; 3<br>即1和2, 1和2，2和3.</p>
<h1 id="三、排序算法"><a href="#三、排序算法" class="headerlink" title="三、排序算法"></a>三、排序算法</h1><h2 id="1-选择排序"><a href="#1-选择排序" class="headerlink" title="1.选择排序"></a>1.选择排序</h2><ol>
<li>找到未排序序列的最小值（最大值）</li>
<li>将最小值（最大值）与未排序序列的第一项交换位置</li>
</ol>
<h2 id="2-冒泡排序"><a href="#2-冒泡排序" class="headerlink" title="2.冒泡排序"></a>2.冒泡排序</h2><ol>
<li>依次比较未排序部分的相邻元素</li>
<li>左大右小（左小右大）则交换元素位置</li>
</ol>
<h2 id="3-插入排序"><a href="#3-插入排序" class="headerlink" title="3.插入排序"></a>3.插入排序</h2><ol>
<li>记录当前插入元素，依次向前比较</li>
<li>大于（小于）该元素的数据，向后移动一位</li>
<li>直到插入元素找到对应位置</li>
</ol>
<h2 id="4-桶排序"><a href="#4-桶排序" class="headerlink" title="4.桶排序"></a>4.桶排序</h2><p>在知道所有待排元素的范围后，根据数据范围确定相应的数组长度，并将元素作为下标记录在数组中，再将所有的元素安下标顺序输出。</p>
<h2 id="5-快速排序"><a href="#5-快速排序" class="headerlink" title="5.快速排序"></a>5.快速排序</h2><blockquote>
<p>快速排序是对冒泡排序的一种改进。</p>
</blockquote>
<ol>
<li>先设定一个分界值，一般选第一个数，通过该分界值降序列分成两部分。</li>
<li>将大于或等于分界值的数据集中到数组右边，小于分界值的数据集中到数组左边。</li>
<li>同样左边和右边的数据可以独立排序。对于左侧的数据，又可以取一个分界值，将该部分数据分成左右两部分，同样在左边放置较小值，右边放置较大值。</li>
<li>重复第三步，直到所有数据排序。<br><img src="https://img1.imgtp.com/2023/08/24/rU5GBQj0.png" alt="截屏2023-08-24 20.02.36.png"><br><img src="https://img1.imgtp.com/2023/08/24/sRb32nw6.png" alt="截屏2023-08-24 20.02.47.png"><br><img src="https://img1.imgtp.com/2023/08/24/h5nbPDfL.png" alt="截屏2023-08-24 20.03.04.png"><br><img src="https://img1.imgtp.com/2023/08/24/Dp29YBTo.png" alt="截屏2023-08-24 20.03.18.png"><br><img src="https://img1.imgtp.com/2023/08/24/AhHFDRFN.png" alt="截屏2023-08-24 20.03.30.png"><br><img src="https://img1.imgtp.com/2023/08/24/8FLYTLj4.png" alt="截屏2023-08-24 20.03.41.png"><br><img src="https://img1.imgtp.com/2023/08/24/GzRc1BYq.png" alt="截屏2023-08-24 20.03.53.png"><br><img src="https://img1.imgtp.com/2023/08/24/iGLdX4VR.png" alt="截屏2023-08-24 20.04.05.png"><br><img src="https://img1.imgtp.com/2023/08/24/znfooIlY.png" alt="截屏2023-08-24 20.04.17.png"><br><img src="https://img1.imgtp.com/2023/08/24/NPwuhidd.png" alt="截屏2023-08-24 20.04.26.png"><br><img src="https://img1.imgtp.com/2023/08/24/ZqUaTcJ7.png" alt="截屏2023-08-24 20.04.37.png"><br><img src="https://img1.imgtp.com/2023/08/24/TxaA2vnl.png" alt="截屏2023-08-24 20.04.49.png"></li>
</ol>
<h2 id="6-归并排序"><a href="#6-归并排序" class="headerlink" title="6.归并排序"></a>6.归并排序</h2><blockquote>
<p>归并排序是建立在归并操作上的一种有效、稳定的排序算法，对所有元素进行逐层折半分组，然后从最小序列开始比较排序，将已有序的子序列合并，得到完全有序的序列，最终所有的元素都是有序的。</p>
</blockquote>
<p><strong>逐层分组：</strong><br><img src="https://img1.imgtp.com/2023/08/24/Tlbju4Hq.png" alt="截屏2023-08-24 20.10.46.png"><br><strong>逐层归并：</strong><br><img src="https://img1.imgtp.com/2023/08/24/dtHoBEeD.png" alt="截屏2023-08-24 20.11.09.png"></p>
<h2 id="7-希尔排序"><a href="#7-希尔排序" class="headerlink" title="7.希尔排序"></a>7.希尔排序</h2><blockquote>
<p>归并希尔排序是对插入排序的优化，基本思路是先选定一个整数作为增量，把待排序文件中的所有数据分组，以每个距离的等差数列为一组，对每一组进行排序，然后将增量缩小，继续分组排序，重复上述动作，直到增量缩小为1时，排序完正好有序。希尔排序原理是每一对分组进行排序后，整个数据就会更接近有序，当增量缩小为1时，就是插入排序。希尔排序在越大的数组上越能发挥优势，因为间隔步子越大，减少插入排序的移动次数越多。</p>
</blockquote>
<p><img src="https://img1.imgtp.com/2023/08/24/eG5XmE3i.png" alt="截屏2023-08-24 20.18.33.png"><br><img src="https://img1.imgtp.com/2023/08/24/VvTdaziV.png" alt="截屏2023-08-24 20.19.02.png"><br><img src="https://img1.imgtp.com/2023/08/24/fhGCjKoE.png" alt="截屏2023-08-24 20.19.09.png"><br><img src="https://img1.imgtp.com/2023/08/24/yNPHVEV3.png" alt="截屏2023-08-24 20.19.20.png"></p>
<h2 id="8-基数排序"><a href="#8-基数排序" class="headerlink" title="8. 基数排序"></a>8. 基数排序</h2><blockquote>
<p>基数排序是一种非比较型整数排序算法，其原理是将所有待比较数值（正整数）统一为同样的数位长度，数位较短的数前面补零。然后，从最低位开始，依次进行一次排序。这样从最低位排序一直到最高位排序完成以后，数列就变成一个有序序列。</p>
</blockquote>
<p><img src="https://img1.imgtp.com/2023/08/24/WtpdAPSV.png" alt="截屏2023-08-24 20.34.35.png"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><table>
<thead>
<tr>
<th align="center">算法</th>
<th align="center">稳定性</th>
<th align="center">平均时间复杂度</th>
</tr>
</thead>
<tbody><tr>
<td align="center">冒泡排序</td>
<td align="center">稳定</td>
<td align="center">O(n^2)</td>
</tr>
<tr>
<td align="center">归并排序</td>
<td align="center">稳定</td>
<td align="center">O(n log2n)</td>
</tr>
<tr>
<td align="center">插入排序</td>
<td align="center">稳定</td>
<td align="center">O(n^2)</td>
</tr>
<tr>
<td align="center">快速排序</td>
<td align="center">不稳定</td>
<td align="center">O(n log2n)</td>
</tr>
<tr>
<td align="center">选择排序</td>
<td align="center">不稳定</td>
<td align="center">O(n^2)</td>
</tr>
<tr>
<td align="center">希尔排序</td>
<td align="center">不稳定</td>
<td align="center">O(n log2n)</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>C++</tag>
        <tag>Programming</tag>
        <tag>CSP-J</tag>
      </tags>
  </entry>
  <entry>
    <title>10|#6-我用猴子排序把Python3.9打败了！</title>
    <url>/2023/08/21/10-6-%E6%88%91%E7%94%A8%E7%8C%B4%E5%AD%90%E6%8E%92%E5%BA%8F%E6%8A%8APython3-9%E6%89%93%E8%B4%A5%E4%BA%86%EF%BC%81/</url>
    <content><![CDATA[<p>hello!<br>B站终于更新了！<br><a href="https://www.bilibili.com/video/BV16u41177Go">https://www.bilibili.com/video/BV16u41177Go</a></p>
<iframe src="//player.bilibili.com/player.html?aid=532513400&bvid=BV16u41177Go&cid=1241034228&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<p>详情请见视频。<br>源代码：   </p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># main.py</span></span><br><span class="line"><span class="keyword">import</span> module</span><br><span class="line"><span class="comment"># 输入数字</span></span><br><span class="line">numstring = module.inputInt()</span><br><span class="line"><span class="comment"># 分割数字</span></span><br><span class="line">numlist = module.str2list(numstring)</span><br><span class="line"><span class="comment"># 字符串转数字</span></span><br><span class="line">lis = module.strlist2intlist(numlist)</span><br><span class="line"><span class="comment"># 排序（猴子排序🐒）</span></span><br><span class="line">sortedList = module.sortList(lis)</span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">module.printList(sortedList)</span><br></pre></td></tr></table></figure>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># module.py</span></span><br><span class="line"><span class="comment"># 导入random</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="comment"># 输入数字函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inputInt</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> inputInt()</span><br><span class="line">    <span class="keyword">except</span> RecursionError:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">input</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分割数字</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">str2list</span>(<span class="params">string</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> str2list(string)</span><br><span class="line">    <span class="keyword">except</span> RecursionError:</span><br><span class="line">        tmp = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        lis = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> string:</span><br><span class="line">            <span class="keyword">if</span> i != <span class="string">&#x27;,&#x27;</span>:</span><br><span class="line">                tmp += i</span><br><span class="line">            <span class="keyword">elif</span> i == <span class="string">&#x27;,&#x27;</span>:</span><br><span class="line">                lis.append(tmp)</span><br><span class="line">                tmp = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        lis.append(tmp)</span><br><span class="line">        <span class="keyword">return</span> lis</span><br><span class="line"><span class="comment"># 字符串转数字</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">strlist2intlist</span>(<span class="params">lis</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> strlist2intlist(lis)</span><br><span class="line">    <span class="keyword">except</span> RecursionError:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length(lis)):</span><br><span class="line">            lis[i] = <span class="built_in">int</span>(lis[i])</span><br><span class="line">        <span class="keyword">return</span> lis</span><br><span class="line"></span><br><span class="line"><span class="comment">#list长度</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">length</span>(<span class="params">lis</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> length(lis)</span><br><span class="line">    <span class="keyword">except</span> RecursionError:</span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> lis:</span><br><span class="line">            res += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sortList</span>(<span class="params">lis</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> sortList(lis)</span><br><span class="line">    <span class="keyword">except</span> RecursionError:</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> isInOrder(lis):</span><br><span class="line">            <span class="comment"># 随机排序直至有序</span></span><br><span class="line">            random.shuffle(lis)</span><br><span class="line">        <span class="keyword">return</span> lis</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">isInOrder</span>(<span class="params">lis</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> isInOrder(lis)</span><br><span class="line">    <span class="keyword">except</span> RecursionError:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, length(lis)):</span><br><span class="line">            <span class="keyword">if</span> lis[i] &lt; lis[i - <span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">printList</span>(<span class="params">lis</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> printList(lis)</span><br><span class="line">    <span class="keyword">except</span> RecursionError:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> lis:</span><br><span class="line">            <span class="built_in">print</span>(i, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br></pre></td></tr></table></figure>
<p>报错信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Fatal Python error: _Py_CheckRecursiveCall: Cannot recover from stack overflow.</span><br><span class="line">Python runtime state: initialized</span><br><span class="line"></span><br><span class="line">Current thread 0x00000001d819c400 (most recent call first):</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 37 in length</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 37 in length</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 37 in length</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 37 in length</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 37 in length</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 37 in length</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 37 in length</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 37 in length</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 37 in length</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 37 in length</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 37 in length</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 37 in length</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 37 in length</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 37 in length</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 37 in length</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 37 in length</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 37 in length</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 37 in length</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 37 in length</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 37 in length</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 37 in length</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 37 in length</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 37 in length</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 37 in length</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 37 in length</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 37 in length</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 37 in length</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 37 in length</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 37 in length</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 37 in length</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 37 in length</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 37 in length</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 37 in length</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 37 in length</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 37 in length</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 37 in length</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 37 in length</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 37 in length</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 37 in length</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 37 in length</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 37 in length</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 37 in length</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 37 in length</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 37 in length</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 37 in length</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 37 in length</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 37 in length</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 37 in length</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 37 in length</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 37 in length</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 30 in strlist2intlist</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 28 in strlist2intlist</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 28 in strlist2intlist</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 28 in strlist2intlist</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 28 in strlist2intlist</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 28 in strlist2intlist</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 28 in strlist2intlist</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 28 in strlist2intlist</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 28 in strlist2intlist</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 28 in strlist2intlist</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 28 in strlist2intlist</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 28 in strlist2intlist</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 28 in strlist2intlist</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 28 in strlist2intlist</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 28 in strlist2intlist</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 28 in strlist2intlist</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 28 in strlist2intlist</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 28 in strlist2intlist</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 28 in strlist2intlist</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 28 in strlist2intlist</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 28 in strlist2intlist</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 28 in strlist2intlist</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 28 in strlist2intlist</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 28 in strlist2intlist</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 28 in strlist2intlist</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 28 in strlist2intlist</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 28 in strlist2intlist</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 28 in strlist2intlist</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 28 in strlist2intlist</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 28 in strlist2intlist</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 28 in strlist2intlist</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 28 in strlist2intlist</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 28 in strlist2intlist</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 28 in strlist2intlist</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 28 in strlist2intlist</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 28 in strlist2intlist</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 28 in strlist2intlist</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 28 in strlist2intlist</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 28 in strlist2intlist</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 28 in strlist2intlist</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 28 in strlist2intlist</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 28 in strlist2intlist</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 28 in strlist2intlist</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 28 in strlist2intlist</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 28 in strlist2intlist</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 28 in strlist2intlist</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 28 in strlist2intlist</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 28 in strlist2intlist</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 28 in strlist2intlist</span><br><span class="line">  File &quot;/Users/pipinstalljoey/Documents/pip_install_Joey_NBCode/module.py&quot;, line 28 in strlist2intlist</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">Process finished with exit code 134 (interrupted by signal 6: SIGABRT)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Programming</tag>
        <tag>Python</tag>
        <tag>video</tag>
      </tags>
  </entry>
  <entry>
    <title>12|Python教程(03) - if/else/elif条件分支</title>
    <url>/2023/08/25/12-Python%E6%95%99%E7%A8%8B-03-if-else-elif%E6%9D%A1%E4%BB%B6%E5%88%86%E6%94%AF/</url>
    <content><![CDATA[<p>Hello!<br>又要开始写代码了…<br>今天学<code>if</code>&#x2F;<code>else</code>&#x2F;<code>elif</code>条件分支语句。</p>
<h1 id="1-变量"><a href="#1-变量" class="headerlink" title="1. 变量"></a>1. 变量</h1><p>定义方法： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">变量名 = &quot;数据&quot;</span><br></pre></td></tr></table></figure>
<p>e.g.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">string = <span class="string">&quot;hello&quot;</span></span><br></pre></td></tr></table></figure>
<p>实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">string = <span class="built_in">input</span>(<span class="string">&quot;请输入：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(string)</span><br></pre></td></tr></table></figure>
<p>输入：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hello world</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hello world</span><br></pre></td></tr></table></figure>
<h1 id="2-比较运算符-逻辑运算符"><a href="#2-比较运算符-逻辑运算符" class="headerlink" title="2. 比较运算符 &amp; 逻辑运算符"></a>2. 比较运算符 &amp; 逻辑运算符</h1><p>返回一个<code>bool</code>值（即<code>True</code>&#x2F;<code>False</code>）</p>
<h2 id="1-比较运算符"><a href="#1-比较运算符" class="headerlink" title="(1)比较运算符"></a>(1)比较运算符</h2><p>是否等于：<code>a == b</code><br>是否不等：<code>a != b</code><br>—<strong>以上可供所有数据类型使用，以下仅供整数&#x2F;浮点数使用</strong>—<br>是否大于：<code>a &gt; b</code><br>是否小于：<code>a &lt; b</code><br>是否大于等于：<code>a &gt;= b</code><br>是否小于等于：<code>a &lt;= b</code>  </p>
<h2 id="2-逻辑运算符"><a href="#2-逻辑运算符" class="headerlink" title="(2)逻辑运算符"></a>(2)逻辑运算符</h2><p><strong>仅供布尔类型使用!</strong></p>
<h3 id="非-not"><a href="#非-not" class="headerlink" title="非 not"></a>非 <code>not</code></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="keyword">not</span> <span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">not</span> <span class="literal">False</span>)</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">False</span><br><span class="line">True</span><br></pre></td></tr></table></figure>
<h3 id="和-and"><a href="#和-and" class="headerlink" title="和 and"></a>和 <code>and</code></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="literal">True</span> <span class="keyword">and</span> <span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="literal">True</span> <span class="keyword">and</span> <span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="literal">False</span> <span class="keyword">and</span> <span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="literal">False</span> <span class="keyword">and</span> <span class="literal">False</span>)</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">True</span><br><span class="line">False</span><br><span class="line">False</span><br><span class="line">False</span><br></pre></td></tr></table></figure>
<p>即两者间有一个是<code>False</code>就返回<code>False</code>。</p>
<h3 id="或-or"><a href="#或-or" class="headerlink" title="或 or"></a>或 <code>or</code></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="literal">True</span> <span class="keyword">or</span> <span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="literal">True</span> <span class="keyword">or</span> <span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="literal">False</span> <span class="keyword">or</span> <span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="literal">False</span> <span class="keyword">or</span> <span class="literal">False</span>)</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">True</span><br><span class="line">True</span><br><span class="line">True</span><br><span class="line">False</span><br></pre></td></tr></table></figure>
<p>即两者间有一个是<code>True</code>就返回<code>True</code>。</p>
<h1 id="3-if"><a href="#3-if" class="headerlink" title="3. if"></a>3. <code>if</code></h1><p><code>if</code>顾名思义，就是如果…就…的意思。<br>格式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;YES&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">YES</span><br></pre></td></tr></table></figure>
<p><code>True</code>的地方可以改成其他<code>bool</code>值。<br>e.g.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">114514</span></span><br><span class="line">b = <span class="number">114514</span></span><br><span class="line"><span class="keyword">if</span> a == b:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;homo&quot;</span>)</span><br></pre></td></tr></table></figure>
<h1 id="4-if-else"><a href="#4-if-else" class="headerlink" title="4. if...else..."></a>4. <code>if...else...</code></h1><p>在原来<code>if</code>条件语句的基础上加上</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;NO&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>e.g.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="number">114</span></span><br><span class="line">y = <span class="number">514</span></span><br><span class="line"><span class="keyword">if</span> a == b:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;a = b&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;a != b&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a != b</span><br></pre></td></tr></table></figure>
<h1 id="5-if-elif-else"><a href="#5-if-elif-else" class="headerlink" title="5. if...elif...(else...)"></a>5. <code>if...elif...(else...)</code></h1><p>在原来<code>if</code>条件语句的基础上加上</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">elif</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;YES&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>也可再加<code>else</code>语句。<br>e.g.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="number">114</span></span><br><span class="line">y = <span class="number">514</span></span><br><span class="line"><span class="keyword">if</span> a == b:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;a = b&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> a &lt; b:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;a &lt; b&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;a &gt; b&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a &lt; b</span><br></pre></td></tr></table></figure>
<h1 id="Caution"><a href="#Caution" class="headerlink" title="Caution!"></a><strong>Caution!</strong></h1><p><code>if/elif/else</code>语句内的代码块必须缩进（建议4个空格）</p>
]]></content>
      <tags>
        <tag>Programming</tag>
        <tag>Python</tag>
        <tag>Python teaching guide</tag>
      </tags>
  </entry>
  <entry>
    <title>14.1|About QQBot with Iflytek Spark - Quick Start</title>
    <url>/2023/11/12/14-1-About-QQBot-with-Iflytek-Spark-Quick-Start/</url>
    <content><![CDATA[<h1 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h1><h2 id="Preparations"><a href="#Preparations" class="headerlink" title="Preparations"></a>Preparations</h2><p><strong>Please make sure that your linux server had installed <code>Python</code> (&gt;3.8, with <code>pip</code>) and <code>git</code>.</strong></p>
<h2 id="Download-Code"><a href="#Download-Code" class="headerlink" title="Download Code"></a>Download Code</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/pipinstalljoey/QQBot-with-Iflytek-Spark.git</span><br><span class="line"><span class="comment"># China Mainland Users:</span></span><br><span class="line"><span class="comment"># git clone https://gitee.com/pipinstalljoey/QQBot-with-Iflytek-Spark.git</span></span><br><span class="line"><span class="built_in">cd</span> QQBot-with-Iflytek-Spark</span><br><span class="line">pip3 install -r requirements.txt</span><br></pre></td></tr></table></figure>

<h2 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h2><p>Open <code>config.yaml</code>.<br>You can see this:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># QQ频道机器人部分</span></span><br><span class="line"><span class="attr">appid:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="attr">token:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment"># 星火大模型部分</span></span><br><span class="line"><span class="attr">ai-AppId:</span> <span class="string">&quot;&quot;</span>  <span class="comment"># 填写控制台中获取的 APPID 信息</span></span><br><span class="line"><span class="attr">ai-ApiSecret:</span> <span class="string">&quot;&quot;</span>  <span class="comment"># 填写控制台中获取的 APISecret 信息</span></span><br><span class="line"><span class="attr">ai-ApiKey:</span> <span class="string">&quot;&quot;</span> <span class="comment"># 填写控制台中获取的 APIKey 信息</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&quot;&quot;</span>  <span class="comment"># 填写大模型的版本（目前仅支持v1.5和v2.0)</span></span><br></pre></td></tr></table></figure>
<p>Just fill in the blanks.</p>
<h2 id="Run"><a href="#Run" class="headerlink" title="Run"></a>Run</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 main.py</span><br></pre></td></tr></table></figure>

<p>Congratulations!<br>That’s it!<br>You have a QQ Robot!</p>
]]></content>
      <tags>
        <tag>Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>14.2|关于 QQBot with Iflytek Spark - 快速开始</title>
    <url>/2023/11/12/14-2-%E5%85%B3%E4%BA%8E-QQBot-with-Iflytek-Spark-%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/</url>
    <content><![CDATA[<h1 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p><strong>请确保你的服务器安装了 <code>Python</code> (&gt;3.8, with <code>pip</code>) 和 <code>git</code>.</strong></p>
<h2 id="下载代码"><a href="#下载代码" class="headerlink" title="下载代码"></a>下载代码</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/pipinstalljoey/QQBot-with-Iflytek-Spark.git</span><br><span class="line"><span class="comment"># 中国大陆用户:</span></span><br><span class="line"><span class="comment"># git clone https://gitee.com/pipinstalljoey/QQBot-with-Iflytek-Spark.git</span></span><br><span class="line"><span class="built_in">cd</span> QQBot-with-Iflytek-Spark</span><br><span class="line">pip3 install -r requirements.txt</span><br></pre></td></tr></table></figure>

<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>打开 <code>config.yaml</code>.<br>你可以看到:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># QQ频道机器人部分</span></span><br><span class="line"><span class="attr">appid:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="attr">token:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment"># 星火大模型部分</span></span><br><span class="line"><span class="attr">ai-AppId:</span> <span class="string">&quot;&quot;</span>  <span class="comment"># 填写控制台中获取的 APPID 信息</span></span><br><span class="line"><span class="attr">ai-ApiSecret:</span> <span class="string">&quot;&quot;</span>  <span class="comment"># 填写控制台中获取的 APISecret 信息</span></span><br><span class="line"><span class="attr">ai-ApiKey:</span> <span class="string">&quot;&quot;</span> <span class="comment"># 填写控制台中获取的 APIKey 信息</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&quot;&quot;</span>  <span class="comment"># 填写大模型的版本（目前仅支持v1.5和v2.0)</span></span><br></pre></td></tr></table></figure>
<p>把你的信息填进去吧！</p>
<h2 id="跑代码"><a href="#跑代码" class="headerlink" title="跑代码"></a>跑代码</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 main.py</span><br></pre></td></tr></table></figure>

<p>好了！<br>这样你就有了一个QQ频道机器人了！   </p>
]]></content>
      <tags>
        <tag>Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>2|本博客BGM（持续更新）</title>
    <url>/2023/03/26/2-%E6%9C%AC%E5%8D%9A%E5%AE%A2BGM%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/</url>
    <content><![CDATA[<ol>
<li><strong>Body Back</strong> by <em>Griffin &amp; Maia Wright</em> (2023-3-25 ~ 2023-5-1)</li>
<li><strong>Feel Like</strong> by <em>Dabin &amp; CAPPA</em> (2023-5-1 ~ 2023-12-1)</li>
<li><strong>Superstar (feat. Linn)</strong> by <strong>Said The Sky &amp; Dabin</strong> (2023-12-2 ~ NOW)</li>
</ol>
]]></content>
      <tags>
        <tag>music</tag>
      </tags>
  </entry>
  <entry>
    <title>3|水视频(1)--一个简单无聊的小程序（</title>
    <url>/2023/04/29/3-%E6%B0%B4%E8%A7%86%E9%A2%91-1-%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E6%97%A0%E8%81%8A%E7%9A%84%E5%B0%8F%E7%A8%8B%E5%BA%8F%EF%BC%88/</url>
    <content><![CDATA[<p>-—–更新于2023-8-13———<br>我又来水视频啦！嗨嗨嗨~<br>本期要介绍的软件是我自己做的“网页加载器”<br>具体内容请看我的视频：<a href="https://www.bilibili.com/video/BV1dV4y1R7z9/">https://www.bilibili.com/video/BV1dV4y1R7z9/</a></p>
<iframe src="//player.bilibili.com/player.html?aid=868026683&bvid=BV1dV4y1R7z9&cid=1114252715&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<p>别忘了一键三连！！！关注转发！！！<br>阿里嘎多~<br>以下是源代码：（需和a_normal_video.mp3放在同一目录下）<br>for Windows：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> tkinter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">clicked</span>():</span><br><span class="line"></span><br><span class="line">    text = tkinter.Text(box, width=<span class="number">50</span>, height=<span class="number">30</span>, undo=<span class="literal">True</span>, autoseparators=<span class="literal">False</span>)</span><br><span class="line">    text.pack()</span><br><span class="line">    scr = tkinter.Scrollbar(box)</span><br><span class="line">    scr.pack(side=<span class="string">&quot;right&quot;</span>,fill=<span class="string">&quot;y&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">101</span>):</span><br><span class="line">        t = random.uniform(<span class="number">0.65</span>, <span class="number">0.85</span>)</span><br><span class="line">        text.insert(tkinter.INSERT, <span class="string">&quot;正在准备打开网页，请等待一小会儿: &#123;&#125;%（剩余时间&#123;&#125;s): \n&quot;</span>.<span class="built_in">format</span>(i, (<span class="number">100</span> - i) * t))</span><br><span class="line">        sys.stdout.flush()</span><br><span class="line">        box.update()</span><br><span class="line">        t = random.uniform(<span class="number">0.25</span>, <span class="number">1</span>)</span><br><span class="line">        time.sleep(t)</span><br><span class="line"></span><br><span class="line">    os.startfile(os.getcwd() + <span class="string">&#x27;/a_normal_video.mp4&#x27;</span>)</span><br><span class="line">    box.mainloop()</span><br><span class="line">sys.path.append(<span class="string">&quot;libs&quot;</span>)</span><br><span class="line">box = tkinter.Tk()</span><br><span class="line">box.title(<span class="string">&quot;WebLoader&quot;</span>)</span><br><span class="line">enter = tkinter.Entry(box)</span><br><span class="line">btn = tkinter.Button(box, text=<span class="string">&quot;提交&quot;</span>, command=clicked)</span><br><span class="line">enter.pack()</span><br><span class="line">btn.pack()</span><br><span class="line">box.mainloop()</span><br></pre></td></tr></table></figure>

<p>for macOS:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> tkinter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">clicked</span>():</span><br><span class="line"></span><br><span class="line">    text = tkinter.Text(box, width=<span class="number">50</span>, height=<span class="number">30</span>, undo=<span class="literal">True</span>, autoseparators=<span class="literal">False</span>)</span><br><span class="line">    text.pack()</span><br><span class="line">    scr = tkinter.Scrollbar(box)</span><br><span class="line">    scr.pack(side=<span class="string">&quot;right&quot;</span>,fill=<span class="string">&quot;y&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">101</span>):</span><br><span class="line">        t = random.uniform(<span class="number">0.65</span>, <span class="number">0.85</span>)</span><br><span class="line">        text.insert(tkinter.INSERT, <span class="string">&quot;正在准备打开网页，请等待一小会儿: &#123;&#125;%（剩余时间&#123;&#125;s): \n&quot;</span>.<span class="built_in">format</span>(i, (<span class="number">100</span> - i) * t))</span><br><span class="line">        sys.stdout.flush()</span><br><span class="line">        box.update()</span><br><span class="line">        t = random.uniform(<span class="number">0.25</span>, <span class="number">1</span>)</span><br><span class="line">        time.sleep(t)</span><br><span class="line"></span><br><span class="line">    os.system(<span class="string">&quot;open a_normal_video.mp4&quot;</span>)</span><br><span class="line">    box.mainloop()</span><br><span class="line">sys.path.append(<span class="string">&quot;libs&quot;</span>)</span><br><span class="line">box = tkinter.Tk()</span><br><span class="line">box.title(<span class="string">&quot;WebLoader&quot;</span>)</span><br><span class="line">enter = tkinter.Entry(box)</span><br><span class="line">btn = tkinter.Button(box, text=<span class="string">&quot;提交&quot;</span>, command=clicked)</span><br><span class="line">enter.pack()</span><br><span class="line">btn.pack()</span><br><span class="line">box.mainloop()</span><br></pre></td></tr></table></figure>


<p>下载链接：  <a href="http://mirror.pipinstalljoey.top/">http://mirror.pipinstalljoey.top</a></p>
<p>(p.s. Windows端软件是命令行版本，想要GUI的请下载Python文件自行编译。)</p>
<br>
Thank you!]]></content>
      <tags>
        <tag>Programming</tag>
        <tag>Python</tag>
        <tag>video</tag>
      </tags>
  </entry>
  <entry>
    <title>4|Python教程(01)(doge</title>
    <url>/2023/05/20/4-Python%E6%95%99%E7%A8%8B-01-doge/</url>
    <content><![CDATA[<p><strong>Hello everyone!</strong></p>
<p>从今天开始我要开始荔枝写教程了！希望会对某些人（哼哼~）带来帮助。</p>
<p>OK,那就开始吧！</p>
<h1 id="什么是Python"><a href="#什么是Python" class="headerlink" title="什么是Python"></a>什么是Python</h1><blockquote>
<p>Python由荷兰数学和计算机科学研究学会的吉多·范罗苏姆于1990年代初设计，作为一门叫做ABC语言的替代品。Python提供了高效的高级数据结构，还能简单有效地面向对象编程。Python语法和动态类型，以及解释型语言的本质，使它成为多数平台上写脚本和快速开发应用的编程语言，随着版本的不断更新和语言新功能的添加，逐渐被用于独立的、大型项目的开发。</p>
<p>Python解释器易于扩展，可以使用C语言或C++（或者其他可以通过C调用的语言）扩展新的功能和数据类型。Python也可用于可定制化软件中的扩展程序语言。Python丰富的标准库，提供了适用于各个主要系统平台的源码或机器码。</p>
<p>——摘自百度百科</p>
</blockquote>
<p><strong>PS.Python的后缀是.py</strong></p>
<h1 id="Python的安装（环境搭建）"><a href="#Python的安装（环境搭建）" class="headerlink" title="Python的安装（环境搭建）"></a>Python的安装（环境搭建）</h1><p><strong>本教程针对Windows用户编写，Mac OS用户不喜勿喷！</strong></p>
<h2 id="安装Python"><a href="#安装Python" class="headerlink" title="安装Python"></a>安装Python</h2><h3 id="1-打开Python官网（2023-5-20有安装器最新）："><a href="#1-打开Python官网（2023-5-20有安装器最新）：" class="headerlink" title="1.打开Python官网（2023-5-20有安装器最新）："></a>1.打开Python官网（2023-5-20有安装器最新）：</h3><p><a href="https://www.python.org/downloads/release/python-3113/">https://www.python.org/downloads/release/python-3113/</a></p>
<p><img src="https://img.pipinstalljoey.top/blog/image/2023/12/23/202312231524879.png" alt="1"></p>
<p>点击你所需要的版本（图中有Description的三种版本推荐）下载  （速度可能比较慢）</p>
<p><img src="https://img.pipinstalljoey.top/blog/image/2023/12/23/202312231524534.gif" alt="2"></p>
<p><strong>一定要点add python.exe to PATH!!!</strong></p>
<p><strong>一定要点add python.exe to PATH!!!</strong></p>
<p><strong>一定要点add python.exe to PATH!!!</strong></p>
<h3 id="2-检查是否安装成功"><a href="#2-检查是否安装成功" class="headerlink" title="2.检查是否安装成功"></a>2.检查是否安装成功</h3><p>Win+r调出“运行”，输入cmd，在弹出的终端中输入“python”</p>
<p><img src="https://img.pipinstalljoey.top/blog/image/2023/12/23/202312231524872.gif" alt="3"></p>
<p>如果和UP显示的差不多（UP版本号和上述安装包不同），就说明安装成功。</p>
<h2 id="安装Python-IDE"><a href="#安装Python-IDE" class="headerlink" title="安装Python IDE"></a>安装Python IDE</h2><p>Python自带IDLE，但是有亿些难用。</p>
<p>这里我推荐PyCharm:<a href="https://www.jetbrains.com.cn/pycharm/download">https://www.jetbrains.com.cn/pycharm/download</a><br><img src="https://img.pipinstalljoey.top/blog/image/2023/12/23/202312231524269.gif" alt="4"><br>下载后用右键管理员模式打开：（图中有安装过程跑码省略）<br><img src="https://img.pipinstalljoey.top/blog/image/2023/12/23/202312231524557.gif" alt="5"><br>打开软件（若有防火墙点“允许访问”）新建项目（名称，位置自选，解释器选本地解释器）<br><img src="https://img.pipinstalljoey.top/blog/image/2023/12/23/202312231524073.gif" alt="6"><br>最后效果：<br><img src="https://img.pipinstalljoey.top/blog/image/2023/12/23/202312231525048.png" alt="7"><br>再测试一下：<br><img src="https://img.pipinstalljoey.top/blog/image/2023/12/23/202312231525453.gif" alt="8"><br>至此，Python环境的安装到此结束。</p>
<h2 id="下一节正式开始编程！"><a href="#下一节正式开始编程！" class="headerlink" title="下一节正式开始编程！"></a>下一节正式开始编程！</h2>]]></content>
      <tags>
        <tag>Programming</tag>
        <tag>Python</tag>
        <tag>Python teaching guide</tag>
      </tags>
  </entry>
  <entry>
    <title>6|利用国外Linux服务器把ChatGPT接入QQ机器人</title>
    <url>/2023/07/22/6-%E5%88%A9%E7%94%A8%E5%9B%BD%E5%A4%96Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8A%8AChatGPT%E6%8E%A5%E5%85%A5QQ%E6%9C%BA%E5%99%A8%E4%BA%BA/</url>
    <content><![CDATA[<p>Hello! 我们又见面了！</p>
<p>今天我们来试着把ChatGPT接入QQ.</p>
<h1 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a>1.准备工作</h1><ul>
<li>一台搭载着Linux系统的 <strong>部署在国外</strong> 的服务器（推荐<code>Ubuntu 22.04 LTS</code>）</li>
<li>QQ小号</li>
<li>一台自己的Windows电脑（可用虚拟机）</li>
<li>魔法</li>
<li>OpenAI &#x2F; New Bing &#x2F; Google &#x2F; 文心一言 &#x2F; Poe 账号（任选一个）</li>
<li>SSH 和 SFTP 工具。Windows: <code>Putty</code> &amp; <code>WinSCP</code> &#x2F; macOS: <code>CyberDuck</code> &amp; <code>Terminal</code>（自带终端）</li>
</ul>
<p>以上这里不过多赘述，也 <strong>不要在评论区问我魔法哪里来的</strong> 。</p>
<h1 id="2-写在前面"><a href="#2-写在前面" class="headerlink" title="2.写在前面"></a>2.写在前面</h1><p>此教程所述的“QQ机器人”项目基于lss233在GitHub上的项目。</p>
<p>项目Latest Release: <a href="https://github.com/lss233/chatgpt-mirai-qq-bot/releases/tag/v2.5.2">https://github.com/lss233/chatgpt-mirai-qq-bot/releases/tag/v2.5.2</a></p>
<p>项目配置手册：<a href="https://chatgpt-qq.lss233.com/">https://chatgpt-qq.lss233.com</a></p>
<h1 id="3-正式开始"><a href="#3-正式开始" class="headerlink" title="3.正式开始"></a>3.正式开始</h1><h2 id="1-下载"><a href="#1-下载" class="headerlink" title="1. 下载"></a>1. 下载</h2><p><em>(v.2.5.2, go-cqhttp版)</em> 以root用户登录，在Linux服务器终端中输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash -c <span class="string">&quot;<span class="subst">$(wget -O- https://gist.githubusercontent.com/lss233/2fdd75be3f0724739368d0dcd9d1367d/raw/62a790da4a391af096074b3355c2c2b7ecab3c28/chatgpt-mirai-installer-gocqhttp.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="2-部署"><a href="#2-部署" class="headerlink" title="2. 部署"></a>2. 部署</h2><p>按照其输出的指令，（要输入(Y&#x2F;N)的输入Y，） 依次输入机器人QQ号、机器人QQ密码 <strong>不要填，直接回车</strong> 、管理员QQ号、然后输入<code>2</code>，有<code>OpenAI API-key</code>的输入<code>API-key</code>，没有的直接回车。<br>记住最后几行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 你需要先 cd ./chatgpt-qq  才能进入到程序的安装目录。</span><br><span class="line">2. 你可以输入docker-compose logs -f --tail=100 来观察运行日志。</span><br><span class="line">3. 修改配置文件后，使用 docker-compose restart 重启程序。</span><br><span class="line">4. 使用 docker-compose pull &amp;&amp; docker-compose up -d 命令来更新程序</span><br></pre></td></tr></table></figure>
<h2 id="3-修改config-cfg，接入AI平台："><a href="#3-修改config-cfg，接入AI平台：" class="headerlink" title="3. 修改config.cfg，接入AI平台："></a>3. 修改<code>config.cfg</code>，接入AI平台：</h2><p><strong>（用<code>OpenAI API-key</code>接入的略过此步骤）</strong><br>用SFTP工具登录服务器，将<code>config.cfg</code>复制到本地。<br>具体的接入步骤见项目<a href="https://chatgpt-qq.lss233.com/">配置手册</a>。<br>最后别忘了：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose restart</span><br></pre></td></tr></table></figure>

<h2 id="4-登录QQ"><a href="#4-登录QQ" class="headerlink" title="4.登录QQ"></a>4.登录QQ</h2><p>下载<a href="https://github.com/lss233/chatgpt-mirai-qq-bot/releases/download/v2.5.2/Windows-quickstart-go-cqhttp-refs.tags.v2.5.2.zip"><code>Windows-quickstart-go-cqhttp-refs.tags.v2.5.2.zip</code></a>, 在解压目录里<code>右键 &gt; 在终端里打开</code>，输入   </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./[.exe文件名].exe</span><br></pre></td></tr></table></figure>
<p>按照其要求填写信息。同样，<strong>密码不要填</strong>。<br>把<code>device.json</code>中的<code>protocol</code>参数改为<code>2</code>。<br>然后用小号扫码登录，并把<code>device.json</code>和登录后生成的<code>session.token</code>传至服务器<code>(/root)/chatgpt-qq/gocqhttp</code>里替换。<br>最后在服务器终端里：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose restart</span><br><span class="line">docker-compose logs -f --<span class="built_in">tail</span>=100</span><br></pre></td></tr></table></figure>

<p>观察是否有Error，并自己排查错误。</p>
<h2 id="5-Enjoy！"><a href="#5-Enjoy！" class="headerlink" title="5.Enjoy！"></a>5.Enjoy！</h2><p>如果你成功了，你就可以尽情玩耍了！<br>如果有ERROR，请看<a href="https://chatgpt-qq.lss233.com/">项目配置手册</a><br>如果要重置对话，对它说<code>重置会话</code><br>如果要它忘记你刚才说的话，对它说<code>回滚会话</code></p>
<p>OK,今天就写到这里。Enjoy!</p>
]]></content>
      <tags>
        <tag>Server</tag>
        <tag>Linux</tag>
        <tag>ChatGPT</tag>
      </tags>
  </entry>
  <entry>
    <title>5|Python教程(02) - First Things First</title>
    <url>/2023/05/21/5-Python%E6%95%99%E7%A8%8B-02-First-Things-First/</url>
    <content><![CDATA[<p>Hello Everyone!<br>我们又见面了！<br>这次我们来学习Python中最基础的两个函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="built_in">input</span>()</span><br></pre></td></tr></table></figure>
<h1 id="1-新建Python文件"><a href="#1-新建Python文件" class="headerlink" title="1.新建Python文件"></a>1.新建Python文件</h1><p>在PyCharm中右键点击文件夹 &gt; 新建 &gt; Python文件 &gt; 输入自己想要的文件名（不加后缀）<br>UP这里建一个名为“hello world”的py文件<br><img src="https://img.pipinstalljoey.top/blog/image/2023/12/23/202312231526900.png" alt="1"><br>就在这里开始我们的代码！</p>
<h1 id="2-print-函数"><a href="#2-print-函数" class="headerlink" title="2.print()函数"></a>2.<code>print()</code>函数</h1><h2 id="最基础的："><a href="#最基础的：" class="headerlink" title="最基础的："></a>最基础的：</h2><p>在<code>print()</code>的括号 <strong>(英文括号！！！)</strong> 中输入一个字符串(string)&#x2F;整数(int)&#x2F;浮点数(float)。</p>
<h3 id="什么是字符串-string-？"><a href="#什么是字符串-string-？" class="headerlink" title="什么是字符串(string)？"></a>什么是字符串(string)？</h3><p>字符串就是用 <strong>英文</strong> 双引号&#x2F;单引号&#x2F;三引号（一般用作多行注释）包在一起的数据类型。<br>e.g.<br> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;pip_install_Joey&quot;</span><br><span class="line">&#x27;hello world&#x27;</span><br></pre></td></tr></table></figure></p>
<h3 id="什么是整数？"><a href="#什么是整数？" class="headerlink" title="什么是整数？"></a>什么是整数？</h3><p>就是不带引号的整数。<br>e.g.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">666</span><br><span class="line">114514</span><br></pre></td></tr></table></figure>
<h3 id="什么是浮点数？"><a href="#什么是浮点数？" class="headerlink" title="什么是浮点数？"></a>什么是浮点数？</h3><p>就是不带引号的小数。<br>e.g.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">6.66</span><br><span class="line">114.514</span><br></pre></td></tr></table></figure>
<h3 id="试试手！"><a href="#试试手！" class="headerlink" title="试试手！"></a>试试手！</h3><p>打开刚刚新建好的 .py 文件<br>输入以下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">114514</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">6.66</span>)</span><br></pre></td></tr></table></figure>
<p>右键在代码区单击 &gt; 运行’[文件名]’<br>输出结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hello world</span><br><span class="line">114514</span><br><span class="line">6.66</span><br></pre></td></tr></table></figure>
<h2 id="进阶玩法！（虽说也不怎么进阶）"><a href="#进阶玩法！（虽说也不怎么进阶）" class="headerlink" title="进阶玩法！（虽说也不怎么进阶）"></a>进阶玩法！（虽说也不怎么进阶）</h2><h3 id="逗号"><a href="#逗号" class="headerlink" title="逗号"></a>逗号</h3><p>在括号里的两个数据中间加英文逗号”,”，<br>e.g.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello world&quot;</span>,<span class="number">666</span>)</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hello world 666</span><br></pre></td></tr></table></figure>
<h3 id="end参数"><a href="#end参数" class="headerlink" title="end参数"></a><code>end</code>参数</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#### 更改方法：</span><br><span class="line">```python</span><br><span class="line">print(&quot;hello world&quot;,end = &quot;&quot;) #&quot;&quot;为空字符串</span><br><span class="line">print(&quot;666&quot;)</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hello world666</span><br></pre></td></tr></table></figure>
<h1 id="3-input-函数"><a href="#3-input-函数" class="headerlink" title="3. input()函数"></a>3. <code>input()</code>函数</h1><p>用于输入，返回你输入的内容（字符串）<br>括号内可以填写提示内容（字符串）<br>e.g.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入：&quot;</span>))</span><br></pre></td></tr></table></figure>
<p>输入<code>hello world</code><br><img src="https://img.pipinstalljoey.top/blog/image/2023/12/23/202312231527789.gif" alt="2"></p>
<p>OK,这就是这篇博客的全部内容，感谢你看到这里。<br>记得留言！😊</p>
]]></content>
      <tags>
        <tag>Programming</tag>
        <tag>Python</tag>
        <tag>Python teaching guide</tag>
      </tags>
  </entry>
  <entry>
    <title>7|CSP-J复习笔记——（一）计算机基础知识</title>
    <url>/2023/08/20/7-CSP-J%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%EF%BC%88%E4%B8%80%EF%BC%89%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<p>（这几天在备考CSP-J初赛，做了些笔记，录如下。）</p>
<h1 id="一、进制转换"><a href="#一、进制转换" class="headerlink" title="一、进制转换"></a>一、进制转换</h1><h2 id="1-十进制转其他进制"><a href="#1-十进制转其他进制" class="headerlink" title="1.十进制转其他进制"></a>1.十进制转其他进制</h2><h3 id="1-整数十进制转其他-用-表示-进制"><a href="#1-整数十进制转其他-用-表示-进制" class="headerlink" title="1.整数十进制转其他(用%表示)进制"></a>1.整数十进制转其他(用%表示)进制</h3><p><strong>用%来除，除到商为0，倒序排列余数。</strong><br>e.g. <em><code>55</code>转为二进制</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">55 / 2 = 27 ... 1</span><br><span class="line">27 / 2 = 13 ... 1</span><br><span class="line">13 / 2 = 6 ... 1</span><br><span class="line">6 / 2 = 3 ... 0</span><br><span class="line">3 / 2 = 1 ... 1</span><br><span class="line">1 / 2 = 0 ... 1</span><br></pre></td></tr></table></figure>

<p>所以<code>55</code>转为二进制为 <code>110111</code></p>
<h3 id="2-小数十进制转其他-用-表示-进制"><a href="#2-小数十进制转其他-用-表示-进制" class="headerlink" title="2.小数十进制转其他(用%表示)进制"></a>2.小数十进制转其他(用%表示)进制</h3><p><strong>用%来乘，小数部分不为0时继续用小数部分乘%，最后正序排列每个积的整数部分作为结果的小数部分。</strong><br>e.g. <em><code>0.625</code>转为二进制</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0.625 * 2 = 1.25</span><br><span class="line">0.25 * 2 = 0.5</span><br><span class="line">0.5 * 2 = 1</span><br></pre></td></tr></table></figure>
<p>所以<code>0.625</code>转为二进制为<code>0.101</code></p>
<h2 id="2-其他进制转十进制"><a href="#2-其他进制转十进制" class="headerlink" title="2.其他进制转十进制"></a>2.其他进制转十进制</h2><p>位权相加。<br>e.g. <code>11001.11</code>转十进制。<br><code>1 * 2 ^ 4 + 1 * 2 ^ 4 + 1 * 2 ^ 0 + 1 * 2 ^ -1 + 1 * 2 ^ -2 = 16 + 8 + 1 + 0.5 + 0.25 = 25.75</code><br>所以<code>11001.11</code>的十进制为<code>25.75</code></p>
<hr>
<h1 id="二、信息存储"><a href="#二、信息存储" class="headerlink" title="二、信息存储"></a>二、信息存储</h1><p><strong>程序中的所有数在计算机内存中都是以二进制的方式存储的。</strong></p>
<h2 id="1-bit和Byte"><a href="#1-bit和Byte" class="headerlink" title="1.bit和Byte"></a>1.bit和Byte</h2><h3 id="bit"><a href="#bit" class="headerlink" title="bit"></a>bit</h3><p>bit 是数据存储的最小单位。</p>
<h3 id="Byte（字节）"><a href="#Byte（字节）" class="headerlink" title="Byte（字节）"></a>Byte（字节）</h3><p>Byte 是计算机数据存储的基本单位<br><strong>1Byte &#x3D; 8bit</strong>.<br>一个<code>int</code>类型变量占4Byte（即32bit）。</p>
<h2 id="2-整数存储"><a href="#2-整数存储" class="headerlink" title="2.整数存储"></a>2.整数存储</h2><h3 id="无符号类型整型"><a href="#无符号类型整型" class="headerlink" title="无符号类型整型"></a>无符号类型整型</h3><p>32位均为数值位</p>
<h3 id="有符号类型整型"><a href="#有符号类型整型" class="headerlink" title="有符号类型整型"></a>有符号类型整型</h3><p>第一位为符号位，其余位为数值位</p>
<h2 id="3-原码、反码和补码"><a href="#3-原码、反码和补码" class="headerlink" title="3.原码、反码和补码"></a>3.原码、反码和补码</h2><p>补码 &#x3D; 反码 + 1<br>原码每位取反为反码。</p>
<h3 id="补码-原码"><a href="#补码-原码" class="headerlink" title="补码 -&gt; 原码"></a>补码 -&gt; 原码</h3><p>e.g.补码 <code>10101011</code>转为原码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10101011 -&gt; 10101010 //-1，转为反码</span><br><span class="line">10101010 -&gt; 01010101 //取反，转为原码</span><br></pre></td></tr></table></figure>

<h2 id="3-图像存储"><a href="#3-图像存储" class="headerlink" title="3.图像存储"></a>3.图像存储</h2><p><strong>图像大小(B) &#x3D; 像素数 * 图像颜色位数 &#x2F; 8</strong></p>
<hr>
<h1 id="三、位运算"><a href="#三、位运算" class="headerlink" title="三、位运算"></a>三、位运算</h1><h2 id="1-位运算符"><a href="#1-位运算符" class="headerlink" title="1.位运算符"></a>1.位运算符</h2><p><code>&amp; | ~ ^ &lt;&lt; &gt;&gt;</code></p>
<h2 id="2"><a href="#2" class="headerlink" title="2.&amp;"></a>2.<code>&amp;</code></h2><p>e.g.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; (<span class="number">13</span> &amp; <span class="number">26</span>); <span class="comment">// 13 = 01101； 26 = 11010</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">8</span><br></pre></td></tr></table></figure>

<p>原因：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0 &amp; 1 = 0</span><br><span class="line">1 &amp; 1 = 1</span><br><span class="line">1 &amp; 0 = 0</span><br><span class="line">0 &amp; 1 = 0</span><br><span class="line">1 &amp; 0 = 0</span><br></pre></td></tr></table></figure>
<p>因为<code>1000 = 8</code>,<br>所以<code>cout &lt;&lt; (13 &amp; 26);</code>结果为<code>8</code></p>
<h3 id="统计整数二进制形式1的个数-n-n-1"><a href="#统计整数二进制形式1的个数-n-n-1" class="headerlink" title="统计整数二进制形式1的个数(n &amp;= n - 1;)"></a>统计整数二进制形式1的个数(<code>n &amp;= n - 1;</code>)</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> n, res = <span class="number">0</span>;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	<span class="keyword">while</span> (n)&#123;</span><br><span class="line">		res++;</span><br><span class="line">		n &amp;= n - <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; res;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输入<code>10</code>，输出<code>2</code></p>
<h3 id="统计整数二进制形式的低位（最低一位1以及前面的0的大小-n-n"><a href="#统计整数二进制形式的低位（最低一位1以及前面的0的大小-n-n" class="headerlink" title="统计整数二进制形式的低位（最低一位1以及前面的0的大小(n &amp;= -n;)"></a>统计整数二进制形式的低位（最低一位<code>1</code>以及前面的<code>0</code>的大小(<code>n &amp;= -n;</code>)</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> n, res = <span class="number">0</span>;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	cout &lt;&lt; (n &amp; -n);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输入<code>10</code>，输出<code>2</code></p>
<h2 id="3-或"><a href="#3-或" class="headerlink" title="3.|或"></a>3.<code>|</code>或</h2><p>e.g.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; (<span class="number">13</span> | <span class="number">26</span>); <span class="comment">// 13 = 01101； 26 = 11010</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">31</span><br></pre></td></tr></table></figure>

<p>原因：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0 | 1 = 1</span><br><span class="line">1 | 1 = 1</span><br><span class="line">1 | 0 = 1</span><br><span class="line">0 | 1 = 1</span><br><span class="line">1 | 0 = 1</span><br></pre></td></tr></table></figure>
<p>因为<code>11111 = 31</code>,<br>所以<code>cout &lt;&lt; (13 | 26);</code>结果为<code>31</code></p>
<h2 id="4-异或"><a href="#4-异或" class="headerlink" title="4.^异或"></a>4.<code>^</code>异或</h2><p><strong>相同为0.不同为1</strong></p>
<p>e.g.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; (<span class="number">13</span> ^ <span class="number">26</span>); <span class="comment">// 13 = 01101； 26 = 11010</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">23</span><br></pre></td></tr></table></figure>

<p>原因：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0 ^ 1 = 1</span><br><span class="line">1 ^ 1 = 0</span><br><span class="line">1 ^ 0 = 1</span><br><span class="line">0 ^ 1 = 1</span><br><span class="line">1 ^ 0 = 1</span><br></pre></td></tr></table></figure>
<p>因为<code>10111 = 23</code>,<br>所以<code>cout &lt;&lt; (13 ^ 26);</code>结果为<code>23</code></p>
<h2 id="5-取反"><a href="#5-取反" class="headerlink" title="5.~取反"></a>5.<code>~</code>取反</h2><p>e.g.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; (~<span class="number">13</span>); <span class="comment">// 13 = 01101（补码）</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-14</span><br></pre></td></tr></table></figure>

<p>原因：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">~0 = 1</span><br><span class="line">~1 = 0</span><br><span class="line">~1 = 0</span><br><span class="line">~0 = 1</span><br><span class="line">~1 = 0</span><br></pre></td></tr></table></figure>
<p>联系原码、反码、补码知识，取反后反码为<code>10001</code>。<br>取反后其符号位为1，电脑认为其是负数，转为原码<code>11110</code>即<code>-14</code>。<br>所以<code>cout &lt;&lt; (~13);</code>结果为<code>-14</code></p>
<h2 id="6-右移"><a href="#6-右移" class="headerlink" title="6.&lt;&lt;左移 &#x2F; &gt;&gt;右移"></a>6.<code>&lt;&lt;</code>左移 &#x2F; <code>&gt;&gt;</code>右移</h2><p>e.g.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; (<span class="number">13</span> &lt;&lt; <span class="number">2</span>) &lt;&lt; endl; <span class="comment">// 13 = 01101</span></span><br><span class="line">	cout &lt;&lt; (<span class="number">13</span> &gt;&gt; <span class="number">2</span>); <span class="comment">// 13 = 01101</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">52</span><br><span class="line">3</span><br></pre></td></tr></table></figure>

<p>原因：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1101 &lt;&lt; 2 -&gt; 110100</span><br><span class="line">1101 &gt;&gt; 2 -&gt; 11.01</span><br></pre></td></tr></table></figure>
<p>因为<code>110100 = 52</code> <code>11.01 = 3.25</code>,(<code>int</code>类型小数点舍去)<br>所以<code>cout &lt;&lt; (13 &lt;&lt; 2) &lt;&lt; endl; cout &lt;&lt; (13 &gt;&gt; 2);</code>结果为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">52</span><br><span class="line">3</span><br></pre></td></tr></table></figure>
<h3 id="PS-关于整型"><a href="#PS-关于整型" class="headerlink" title="PS. 关于整型"></a>PS. 关于整型</h3><p><code>unsigned</code>无符号<br><code>signed</code> 有符号<br><code>short</code> 短整型<br><code>int</code> 常规整型<br><code>long long</code>长整型<br>以<code>0x</code>为前缀的整数为十六进制</p>
<hr>
<h1 id="四、前中后缀表达式"><a href="#四、前中后缀表达式" class="headerlink" title="四、前中后缀表达式"></a>四、前中后缀表达式</h1><h2 id="中缀转前-后缀"><a href="#中缀转前-后缀" class="headerlink" title="中缀转前&#x2F;后缀"></a>中缀转前&#x2F;后缀</h2><p>e.g. <code>a+b*c-(d+e)</code></p>
<ol>
<li>按照运算符优先级对所有运算单位加括号:<code>((a+(b*c))-(d+e)</code></li>
<li>把运算符号移到括号的前&#x2F;后面：前<code>-(+(a*(bc))+(de))</code></li>
<li>去掉括号：前<code>-+a*bc+de</code></li>
</ol>
<h2 id="前缀转中缀"><a href="#前缀转中缀" class="headerlink" title="前缀转中缀"></a>前缀转中缀</h2><ol>
<li>从后往前看，将最后一个运算符放在最后两个未整理的数之间，并加上括号。</li>
<li>删去多余括号。</li>
</ol>
<h2 id="后缀转中缀"><a href="#后缀转中缀" class="headerlink" title="后缀转中缀"></a>后缀转中缀</h2><ol>
<li>从前往后看，将第一个运算符放在前两个未整理的数之间，并加上括号。</li>
<li>删去多余括号。</li>
</ol>
]]></content>
      <tags>
        <tag>C++</tag>
        <tag>Programming</tag>
        <tag>CSP-J</tag>
      </tags>
  </entry>
  <entry>
    <title>8|CSP-J复习笔记——（二）数据结构（一）（线性结构）</title>
    <url>/2023/08/20/8-CSP-J%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%EF%BC%88%E4%BA%8C%EF%BC%89%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%88%E7%BA%BF%E6%80%A7%E7%BB%93%E6%9E%84%EF%BC%89/</url>
    <content><![CDATA[<h2 id="Warning"><a href="#Warning" class="headerlink" title="Warning:"></a>Warning:</h2><p>本文原来图片很多，但是以前用的图床崩了，所以没图了…<br>（继续！）</p>
<h1 id="一、数组"><a href="#一、数组" class="headerlink" title="一、数组"></a>一、数组</h1><h2 id="1-数组（静态数据表）"><a href="#1-数组（静态数据表）" class="headerlink" title="1.数组（静态数据表）"></a>1.数组（静态数据表）</h2><p>定义：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;type&gt; &lt;name&gt;[n(int)];</span><br></pre></td></tr></table></figure>
<p>e.g.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">100</span>];</span><br></pre></td></tr></table></figure>
<h2 id="2-动态数组-动态数据表-vector"><a href="#2-动态数组-动态数据表-vector" class="headerlink" title="2.动态数组(动态数据表)(vector)"></a>2.动态数组(动态数据表)(vector)</h2><ol>
<li>引入头文件 <code>#include &lt;vector&gt;</code></li>
<li>定义 <code>vector&lt;int&gt; a = &#123;a[0], a[1], ...&#125;;</code></li>
<li>添加元素 <code>a.push_back(...);</code></li>
<li>获取长度 <code>a.size();</code></li>
<li>删除末尾元素 <code>a.pop_back();</code></li>
<li>获取元素 <code>cout &lt;&lt; a[&lt;index&gt;];</code></li>
</ol>
<p>(<code>a.reserve(&lt;int&gt;)</code>没有实际意义，可以忽略)</p>
<p>好处：</p>
<ol>
<li>可扩容</li>
<li>提供了丰富函数</li>
</ol>
<p>e.g.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span> <span class="comment">// 万能头文件，也可导入&lt;iostream&gt;和&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; a = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        a.<span class="built_in">push_back</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; a.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        cout &lt;&lt; a[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    a.<span class="built_in">pop_back</span>();</span><br><span class="line">    cout &lt;&lt; a.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        cout &lt;&lt; a[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10</span><br><span class="line">0 1 2 3 4 5 6 7 8 9 </span><br><span class="line">9</span><br><span class="line">0 1 2 3 4 5 6 7 8 </span><br></pre></td></tr></table></figure>
<h1 id="二、单链表"><a href="#二、单链表" class="headerlink" title="二、单链表"></a>二、单链表</h1><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h2><h3 id="指针变量"><a href="#指针变量" class="headerlink" title="指针变量"></a>指针变量</h3><p>指针就是存地址的变量。</p>
<p>e.g.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">123</span>;</span><br><span class="line">    <span class="type">int</span> *p = &amp;a;</span><br><span class="line">    cout &lt;&lt; *p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">123</span><br></pre></td></tr></table></figure>
<p>单链表数据结构：</p>
<p><a href="https://img1.imgtp.com/2023/08/20/hHiOZizx.png"><img src="https://img1.imgtp.com/2023/08/20/hHiOZizx.png" alt="截屏2023-08-11 19.06.17.png"></a></p>
<p><code>a2</code>的前驱是<code>a1</code>，后继是<code>a3</code></p>
<h3 id="结构体（拓展）"><a href="#结构体（拓展）" class="headerlink" title="结构体（拓展）"></a>结构体（拓展）</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结构体（复合数据类型）</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> data; <span class="comment">//数据</span></span><br><span class="line">    Node *next; <span class="comment">//地址</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Node a1; <span class="comment">//定义了一个结点</span></span><br><span class="line">    a1.data = <span class="number">666</span>; <span class="comment">//更新结点数据</span></span><br><span class="line">    Node *point; <span class="comment">//定义结点指针</span></span><br><span class="line">    point = &amp;a1; <span class="comment">//指针指向</span></span><br><span class="line">    cout &lt;&lt; point-&gt;data; <span class="comment">//输出</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>output:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">666</span><br></pre></td></tr></table></figure>
<h2 id="2-操作"><a href="#2-操作" class="headerlink" title="2. 操作"></a>2. 操作</h2><p>以下<code>p</code>指向<code>a1</code>, <code>q</code>指向<code>a2</code></p>
<h3 id="next"><a href="#next" class="headerlink" title="next"></a><code>next</code></h3><p>已知节点的后一个结点：<code>p -&gt; next</code></p>
<h3 id="删除a2结点"><a href="#删除a2结点" class="headerlink" title="删除a2结点"></a>删除<code>a2</code>结点</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">p -&gt; next = q -&gt; next； <span class="comment">//删除结点q</span></span><br></pre></td></tr></table></figure>
<h3 id="插入a2结点"><a href="#插入a2结点" class="headerlink" title="插入a2结点"></a>插入<code>a2</code>结点</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">q -&gt; next = p -&gt; next; <span class="comment">//结点q的next指向a3</span></span><br><span class="line">p -&gt; next = q; <span class="comment">//结点p的next指向结点q</span></span><br></pre></td></tr></table></figure>
<h1 id="三、双向链表"><a href="#三、双向链表" class="headerlink" title="三、双向链表"></a>三、双向链表</h1><p>数据结构示意图：</p>
<p><a href="https://img1.imgtp.com/2023/08/20/kDa10cc0.png"><img src="https://img1.imgtp.com/2023/08/20/kDa10cc0.png" alt="截屏2023-08-11 19.38.47.png"></a></p>
<h3 id="llink和rlink"><a href="#llink和rlink" class="headerlink" title="llink和rlink"></a><code>llink</code>和<code>rlink</code></h3><p><code>p -&gt; llink;</code> ：获取结点p的上一个结点<br><code>p -&gt; rlink;</code> ：获取结点p的下一个结点</p>
<h3 id="修改指针指向"><a href="#修改指针指向" class="headerlink" title="修改指针指向"></a>修改指针指向</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">p = p -&gt; llink; <span class="comment">//指向p结点的前一个结点</span></span><br></pre></td></tr></table></figure>
<h3 id="删除结点"><a href="#删除结点" class="headerlink" title="删除结点"></a>删除结点</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">p -&gt; llink -&gt; rlink = p -&gt; rlink; <span class="comment">//修改结点p的上一个结点的下一个结点为结点p的下一个结点</span></span><br><span class="line">p -&gt; rlink -&gt; llink = p -&gt; llink; <span class="comment">//修改结点p的下一个结点的上一个结点为结点p的上一个结点</span></span><br></pre></td></tr></table></figure>
<h3 id="插入结点"><a href="#插入结点" class="headerlink" title="插入结点"></a>插入结点</h3><p>e.g. 将q插入到p后</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">q -&gt; rlink = p -&gt; rlink; <span class="comment">//q指向的下一个结点 = p指向的下一个结点 </span></span><br><span class="line">p -&gt; rlink = q; <span class="comment">//p指向的下一个结点 = 结点q</span></span><br><span class="line">q -&gt; rlink -&gt; llink = q; <span class="comment">//q指向的下一个结点的上一个结点 = 结点q</span></span><br><span class="line">q -&gt; llink = p; <span class="comment">//q指向的上一个结点 = 结点p</span></span><br></pre></td></tr></table></figure>
<h1 id="四、循环链表"><a href="#四、循环链表" class="headerlink" title="四、循环链表"></a>四、循环链表</h1><p><a href="https://img1.imgtp.com/2023/08/20/lCYetpZ7.png"><img src="https://img1.imgtp.com/2023/08/20/lCYetpZ7.png" alt="截屏2023-08-11 20.01.42.png"></a></p>
<h1 id="五、栈"><a href="#五、栈" class="headerlink" title="五、栈"></a>五、栈</h1><p>只能在顶端添加&#x2F;删除数据，即先进后出（FILO First In Last Out）<br>e.g.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span> <span class="comment">//导入头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	stack&lt;<span class="type">int</span>&gt; st; <span class="comment">//定义空栈</span></span><br><span class="line">	st.<span class="built_in">push</span>(<span class="number">123</span>); <span class="comment">//入栈</span></span><br><span class="line">	st.<span class="built_in">pop</span>(); <span class="comment">//出栈</span></span><br><span class="line">	cout &lt;&lt; st.<span class="built_in">top</span>() &lt;&lt; endl; <span class="comment">//获取栈顶元素</span></span><br><span class="line">	cout &lt;&lt; st.<span class="built_in">size</span>(); <span class="comment">//获取栈的大小</span></span><br><span class="line">	st.<span class="built_in">empty</span>(); <span class="comment">//清空栈</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="六、队列"><a href="#六、队列" class="headerlink" title="六、队列"></a>六、队列</h1><p>只能在一段（队尾）添加，另一段（队首）删除。即先进先出(FIFO First In First Out)<br>e.g.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//新建队列</span></span><br><span class="line">	queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">	<span class="comment">//入队</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">		q.<span class="built_in">push</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//出队</span></span><br><span class="line">	q.<span class="built_in">pop</span>();</span><br><span class="line">	<span class="comment">//队列大小</span></span><br><span class="line">	cout &lt;&lt; q.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">	<span class="comment">//获取队首</span></span><br><span class="line">	cout &lt;&lt; q.<span class="built_in">front</span>() &lt;&lt; endl;</span><br><span class="line">	<span class="comment">//获取队尾</span></span><br><span class="line">	cout &lt;&lt; q.<span class="built_in">back</span>() &lt;&lt; endl;</span><br><span class="line">	<span class="comment">//清空队列</span></span><br><span class="line">	q.<span class="built_in">empty</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <tags>
        <tag>C++</tag>
        <tag>Programming</tag>
        <tag>CSP-J</tag>
      </tags>
  </entry>
  <entry>
    <title>9|CSP-J复习笔记——（三）数据结构（二）（非线性结构）</title>
    <url>/2023/08/20/9-CSP-J%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%EF%BC%88%E4%B8%89%EF%BC%89%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%88%E9%9D%9E%E7%BA%BF%E6%80%A7%E7%BB%93%E6%9E%84%EF%BC%89/</url>
    <content><![CDATA[<h2 id="Warning"><a href="#Warning" class="headerlink" title="Warning:"></a>Warning:</h2><p>本文原来图片很多，但是以前用的图床崩了，所以没图了…<br>(Continue…)</p>
<h1 id="一、树"><a href="#一、树" class="headerlink" title="一、树"></a>一、树</h1><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h2><p>树是一种非线性数据结构，它由一些节点组成。</p>
<h2 id="2-概念"><a href="#2-概念" class="headerlink" title="2.概念"></a>2.概念</h2><p>边用来连接树中节点，N个节点，N-1条边。<br>图中A是B,C,D的父节点，B,C,D是A的子节点（。<br>没有父节点的节点称为根节点，<br>没有子节点的节点叫做叶节点。<br>拥有同一父节点的各节点彼此是兄弟节点。<br>子树：父节点的子节点及其以下所属节点。<br><a href="https://img1.imgtp.com/2023/08/20/DG752MN0.png"><img src="https://img1.imgtp.com/2023/08/20/DG752MN0.png" alt="截屏2023-08-16 18.41.51.png"></a><br>一个节点的分支个数称为该节点的度（叶节点的度为0）。<br> N叉树的度最大为N。</p>
<h2 id="3-满二叉树"><a href="#3-满二叉树" class="headerlink" title="3.满二叉树"></a>3.满二叉树</h2><p> 除了最后一层的叶节点，其他节点都有两个孩子。</p>
<h2 id="4-完全二叉树"><a href="#4-完全二叉树" class="headerlink" title="4.完全二叉树"></a>4.完全二叉树</h2><p> 前n-1层节点数达到最大值，最后一层节点从左往右排列。<br><a href="https://img1.imgtp.com/2023/08/20/DG752MN0.png"><img src="https://img1.imgtp.com/2023/08/20/DG752MN0.png" alt="截屏2023-08-16 18.41.51.png"></a><br>满二叉树是特殊的完全二叉树。</p>
<h2 id="5-编号"><a href="#5-编号" class="headerlink" title="5.编号"></a>5.编号</h2><p>父节点的编号是k时，左孩子的编号是2k，右孩子的编号是2k+1</p>
<h2 id="6-遍历"><a href="#6-遍历" class="headerlink" title="6.遍历"></a>6.遍历</h2><h3 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h3><p>根 -&gt; 左子树 -&gt; 右子树</p>
<h3 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h3><p>左子树 -&gt; 右子树 -&gt; 根</p>
<h3 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h3><p>左子树 -&gt; 根 -&gt; 右子树</p>
<h1 id="二、图"><a href="#二、图" class="headerlink" title="二、图"></a>二、图</h1><p>图是由边和节点组成的数据类型。</p>
<h2 id="1-有向图-无向图"><a href="#1-有向图-无向图" class="headerlink" title="1.有向图&amp;无向图"></a>1.有向图&amp;无向图</h2><p>有向图：图的边有方向，只能按箭头方向从一点到另一点。<br>无向图：图的边没有方向</p>
<h2 id="2-度"><a href="#2-度" class="headerlink" title="2.度"></a>2.度</h2><ol>
<li>入度：以这个节点为终点的有向边的数目。</li>
<li>出度：以这个节点为起点的有向边的数目。</li>
<li>度：上述两个值之和。</li>
</ol>
<h2 id="3-连通"><a href="#3-连通" class="headerlink" title="3.连通"></a>3.连通</h2><p>图中从一个顶点到达另一顶点，若存在至少一条路径，则称这两个顶点连通。<br><a href="https://img1.imgtp.com/2023/08/20/AfA1XtFt.png"><img src="https://img1.imgtp.com/2023/08/20/AfA1XtFt.png" alt="截屏2023-08-20 14.30.43.png"></a></p>
<h3 id="有向连通图"><a href="#有向连通图" class="headerlink" title="有向连通图"></a>有向连通图</h3><p>任意一个节点可以到达另外一个节点的有向图叫有向连通图。<br><a href="https://img1.imgtp.com/2023/08/20/K3427lny.png"><img src="https://img1.imgtp.com/2023/08/20/K3427lny.png" alt="截屏2023-08-20 14.34.17.png"></a></p>
<h3 id="无向连通图"><a href="#无向连通图" class="headerlink" title="无向连通图"></a>无向连通图</h3><p>任意一个节点可以到达另外一个节点的有向图叫有向连通图。<br><a href="https://img1.imgtp.com/2023/08/20/vdYlLk4j.png"><img src="https://img1.imgtp.com/2023/08/20/vdYlLk4j.png" alt="截屏2023-08-20 14.31.31.png"></a></p>
<h2 id="4-完全图"><a href="#4-完全图" class="headerlink" title="4.完全图"></a>4.完全图</h2><p>每一个顶点都和其他顶点恰有一条边相连。</p>
<h3 id="有向完全图"><a href="#有向完全图" class="headerlink" title="有向完全图"></a>有向完全图</h3><p>n个顶点 -&gt; n(n-1)条边</p>
<h3 id="无向完全图"><a href="#无向完全图" class="headerlink" title="无向完全图"></a>无向完全图</h3><p>n个顶点 -&gt; n(n-1)&#x2F;2条边</p>
<h2 id="图的遍历（深度优先搜索）"><a href="#图的遍历（深度优先搜索）" class="headerlink" title="图的遍历（深度优先搜索）"></a>图的遍历（深度优先搜索）</h2><p>e.g.<br><a href="https://img1.imgtp.com/2023/08/20/G53ga9Kw.png"><img src="https://img1.imgtp.com/2023/08/20/G53ga9Kw.png" alt="截屏2023-08-20 14.38.22.png"></a></p>
<ol>
<li>任意选择一个节点作为起点，e.g.节点1</li>
<li>节点1和节点2之间有边，继续搜索节点2</li>
<li>节点2和节点5之间有边，继续搜索节点5</li>
<li>节点5和节点7之间有边，继续搜索节点7</li>
<li>节点7和节点6之间有边，继续搜索节点6</li>
<li>节点6有两个分支，先选择其中一个尽可能深地搜索</li>
<li>节点6和节点3之间有边，继续搜索节点3</li>
<li>该分支已经搜索完，退回到节点6，再选择另一个分支。</li>
<li>节点6和节点4之间有边，继续搜索节点4</li>
<li>搜索完成：1-2-5-7-6-3-4</li>
</ol>
]]></content>
      <tags>
        <tag>C++</tag>
        <tag>Programming</tag>
        <tag>CSP-J</tag>
      </tags>
  </entry>
  <entry>
    <title>13.1|About QQBot with Iflytek Spark</title>
    <url>/2023/11/12/13-1-About-QQBot-with-Iflytek-Spark/</url>
    <content><![CDATA[<h1 id="About-QQBot-with-Iflytek-Spark"><a href="#About-QQBot-with-Iflytek-Spark" class="headerlink" title="About QQBot with Iflytek Spark"></a>About QQBot with Iflytek Spark</h1><h2 id="Information"><a href="#Information" class="headerlink" title="Information"></a>Information</h2><p>QQBot with 星火大模型 is a kind of QQ Robot Service that based on <strong>IFLYTEK Spark</strong> and <strong><code>qq-botpy</code></strong> module.<br>The robot can answer all kinds of questions.<br>Here is an example:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Q: @Robot Hello.</span><br><span class="line">A: Hello! How may I assist you today? </span><br></pre></td></tr></table></figure>

<p>This project is <strong>Open Source</strong> .<br>It is published on <strong>Github</strong> and <strong>Gitee</strong> .</p>
<h2 id="Thanks-you-guys"><a href="#Thanks-you-guys" class="headerlink" title="Thanks, you guys!"></a>Thanks, you guys!</h2><ol>
<li>Tencent</li>
<li>Python</li>
<li>Iflytek</li>
<li>JetBrains</li>
</ol>
<h2 id="Be-my-sponcor"><a href="#Be-my-sponcor" class="headerlink" title="Be my sponcor!"></a>Be my sponcor!</h2><p>You can support me in writing better code in <a href="https://afdian.net/a/pipinstalljoey">https://afdian.net/a/pipinstalljoey</a></p>
<h2 id="Start-Working"><a href="#Start-Working" class="headerlink" title="Start Working!"></a>Start Working!</h2>]]></content>
      <tags>
        <tag>Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>13.2|关于 QQBot with Iflytek Spark</title>
    <url>/2023/11/12/13-2-%E5%85%B3%E4%BA%8E-QQBot-with-Iflytek-Spark/</url>
    <content><![CDATA[<h1 id="关于-QQBot-with-Iflytek-Spark"><a href="#关于-QQBot-with-Iflytek-Spark" class="headerlink" title="关于 QQBot with Iflytek Spark"></a>关于 QQBot with Iflytek Spark</h1><h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2><p>QQBot with 星火大模型 是基于 <strong>科大讯飞星火大模型</strong> 和Python模块<code>qq-botpy</code>的提供QQ频道机器人服务的项目。<br>这里有一个例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Q: @Robot Hello.</span><br><span class="line">A: Hello! How may I assist you today? </span><br></pre></td></tr></table></figure>

<p>这个项目是 <strong>开源</strong> 的。<br>它在 <strong>Github</strong> 和 <strong>Gitee</strong> 上发布。</p>
<h2 id="谢了，伙计！"><a href="#谢了，伙计！" class="headerlink" title="谢了，伙计！"></a>谢了，伙计！</h2><ol>
<li>腾讯</li>
<li>Python</li>
<li>科大讯飞</li>
<li>JetBrains</li>
</ol>
<h2 id="为我发电！"><a href="#为我发电！" class="headerlink" title="为我发电！"></a>为我发电！</h2><p>你可以在<a href="https://afdian.net/a/pipinstalljoey">https://afdian.net/a/pipinstalljoey</a>中为我发电。</p>
]]></content>
      <tags>
        <tag>Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>15|好好好，这么玩是吧</title>
    <url>/2023/12/23/15-%E5%A5%BD%E5%A5%BD%E5%A5%BD%EF%BC%8C%E8%BF%99%E4%B9%88%E7%8E%A9%E6%98%AF%E5%90%A7/</url>
    <content><![CDATA[<p>Hello! 我们又见面了！</p>
<p>视频也有了：<a href="https://www.bilibili.com/video/BV1Ec411C71Q/">https://www.bilibili.com/video/BV1Ec411C71Q/</a></p>
<iframe src="//player.bilibili.com/player.html?aid=282692489&bvid=BV1Ec411C71Q&cid=1378301195&p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<p>这次给大家带来的是一段奇怪的代码。</p>
<p>（虽然这只是一段冒泡排序的代码）</p>
<p>原代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;iostream&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, a[<span class="number">100</span>];</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[j] &gt; a[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="built_in">swap</span>(a[j], a[j + <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cout &lt;&lt; a[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>《优化》后的代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _ int</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __ &#123;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ___ &#125;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ____ ;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _____ cout</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ______ &lt;&lt;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _______ main()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ________ return</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _________ 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __________ <span class="string">&quot;iostream&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ___________ using</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ____________ namespace</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _____________ std</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ______________ <span class="keyword">if</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _______________ &gt;&gt;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ________________ cin</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _________________ for</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __________________ (</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ___________________ )</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ____________________ =</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _____________________ ,</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ______________________ 100</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _______________________ ++</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ________________________ &lt;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _________________________ [</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __________________________ ]</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ___________________________ +</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ____________________________ -</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _____________________________ swap</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ______________________________ &gt;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _______________________________ <span class="string">&quot; &quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ________________________________ 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _________________________________ n</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __________________________________ a</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ___________________________________ i</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ____________________________________ j</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> __________</span></span><br><span class="line"></span><br><span class="line">___________ ____________ _____________ ____</span><br><span class="line"></span><br><span class="line">_ _______ __</span><br><span class="line"></span><br><span class="line">    _ _________________________________ _____________________ __________________________________ _________________________ ______________________ __________________________ ____</span><br><span class="line">    ________________ _______________ _________________________________ ____</span><br><span class="line">    _________________ __________________ _ ___________________________________ ____________________ _________ ____ ___________________________________ ________________________ _________________________________ ____ ___________________________________ _______________________ ___________________ __</span><br><span class="line">        ________________ _______________ __________________________________ _________________________ ___________________________________ __________________________ ____</span><br><span class="line">    ___</span><br><span class="line">    _________________ __________________ _ ___________________________________ ____________________ _________ ____ ___________________________________ ________________________ _________________________________ ____________________________ ________________________________ ____ ___________________________________ _______________________ ___________________ __</span><br><span class="line">        _________________ __________________ _ ____________________________________ ____________________ _________ ____ ____________________________________ ________________________ _________________________________ ____________________________ ________________________________ ____ ____________________________________ _______________________ ___________________ __</span><br><span class="line">            ______________ __________________ __________________________________ _________________________ ____________________________________ __________________________ ______________________________ __________________________________ _________________________ ____________________________________ ___________________________ ________________________________ __________________________ ___________________ __</span><br><span class="line">                _____________________________ __________________ __________________________________ _________________________ ____________________________________ __________________________ _____________________ __________________________________ _________________________ ____________________________________ ___________________________ ________________________________ __________________________ ___________________ ____</span><br><span class="line">            ___</span><br><span class="line">        ___</span><br><span class="line">    ___</span><br><span class="line">    _________________ __________________ _ ___________________________________ ____________________ _________ ____ ___________________________________ ________________________ _________________________________ ____ ___________________________________ _______________________ ___________________ __</span><br><span class="line">        _____ ______ __________________________________ _________________________ ___________________________________ __________________________ ______ _______________________________ ____</span><br><span class="line">    ___</span><br><span class="line">    ________ _________ ____</span><br><span class="line">___</span><br></pre></td></tr></table></figure>

<p>Enjoy! (虽然你们不可能会喜欢这种代码～)</p>
]]></content>
      <tags>
        <tag>C++</tag>
        <tag>Programming</tag>
        <tag>video</tag>
      </tags>
  </entry>
  <entry>
    <title>16|[X-Studio洛天依原创曲]雪梦(feat. 洛天依) - 在雪中飘洒梦想,失败又何妨.</title>
    <url>/2024/02/01/16-X-Studio%E6%B4%9B%E5%A4%A9%E4%BE%9D%E5%8E%9F%E5%88%9B%E6%9B%B2-%E9%9B%AA%E6%A2%A6-feat-%E6%B4%9B%E5%A4%A9%E4%BE%9D-%E5%9C%A8%E9%9B%AA%E4%B8%AD%E9%A3%98%E6%B4%92%E6%A2%A6%E6%83%B3-%E5%A4%B1%E8%B4%A5%E5%8F%88%E4%BD%95%E5%A6%A8/</url>
    <content><![CDATA[<p>Hello! </p>
<p>这次我以一个不同的身份发博客——网易音乐人</p>
<p>(哈哈我真是太牛了doge)</p>
<p>官方MV:</p>
<iframe src="//player.bilibili.com/player.html?aid=1450160794&bvid=BV1Sv421i7rf&cid=1426700386&p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<p>网易云:</p>
<p><a href="https://music.163.com/#/song?id=2122688372">雪梦(feat. 洛天依) - pip_install_Joey&#x2F;洛天依 - 单曲 - 网易云音乐 (163.com)</a></p>
<p>第一次写歌,写的不好请见谅,写得好请一键三连!</p>
<p>谢谢! </p>
]]></content>
      <tags>
        <tag>music</tag>
      </tags>
  </entry>
</search>
